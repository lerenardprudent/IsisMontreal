<!doctype html>
<html>
<head>	
	<meta charset="UTF-8">
	<title>ISIS Questionnaire T2 / ISIS Survey T2</title>	
	<script type="text/javascript" src="objs/jquery-1.10.2.js"></script>
	
	<link rel="shortcut icon" href="media/spirale_isis.png">
	<link rel="stylesheet" href="objs/jquery-impromptu.css" />
	<script src="objs/jquery-impromptu.js"></script>
	<script type="text/javascript" src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD4qnbkOe5X7pll7qyIFtkeLzjzkbPnAGo&amp;libraries=places,drawing,geometry,panoramio,weather&region=ca&sensor=false"></script>

	<script type="text/javascript" src="questionnaire_texte.json"></script>
	<script type="text/javascript" src="traitement_carto.js"></script>
	<script type="text/javascript" src="interactions_bd.js"></script>
	<link rel="stylesheet" href="style_isis.css" />
	
	<script type="text/javascript" src="objs/markerwithlabel_packed.js"></script>
	
	<script type="text/javascript" src="objs/jquery.csv-0.71.js"></script>
		
	<script type="text/javascript">
	
		var MODE_DESSIN = {
		  Point : {value: 0, nom: "point"}, 
		  Polygone: {value: 1, nom: "polygone"},
		  DomicileVerification: {value: 2, nom: "domver" }
		};
		var LANGUE = {
			Français : { ind: 0, val: "fr" },
			Anglais : { ind: 1, val: "en" }
		};
		
		var DIRECTION_QUESTIONNAIRE = {
			Suivant : { i: 0, val: "next" },
			Précédent : { i: 1, val: "prev" },
			Fin : { i : 2, val: "fin" }
		};

		var CODE_ERREUR = {
			PasUneErreur : { nom : 'nonerr', val : 0 },
			LangueErronnée : { nom : 'lang', val : 101 },
			AucunIdParticipant : { nom : 'idpart', val : 102 },
			AucunNumQuestion : { nom : 'numquest', val : 103 },
			NumQuestionInvalide : { nom : 'numquestinv', val : 104 },
			ModeDessinInvalide : { nom : 'modedessin', val : 105 },
			
			Inconnu : { nom : 'inconnu', val : 999 }
		};
		
		var _erreurs = { };
		var e1 = {}, e2 = {}, e3 = {}, e4 = {}, e5 = {}, e6 = {};
		e1[LANGUE.Français.val] = "Langue n'est pas reconnue";
		e1[LANGUE.Anglais.val] = "Invalid language option";			
		e2[LANGUE.Français.val] = "Aucun identifiant de participant n'est fourni";
		e2[LANGUE.Anglais.val] = "No participant ID";
		e3[LANGUE.Français.val] = "Le numéro de question n'est pas spécifié.";
		e3[LANGUE.Anglais.val] = "The question number is missing.";
		e4[LANGUE.Français.val] = "Le numéro de question n'est pas valide.";
		e4[LANGUE.Anglais.val] = "The question number is not valid.";
		e5[LANGUE.Français.val] = "Un mode de dessin configuré est invalide";
		e5[LANGUE.Anglais.val] = "A configured drawing mode is invalid";
		e6[LANGUE.Français.val] = "Erreur inconnue";
		e6[LANGUE.Anglais.val] = "Unknown error";
		
		_erreurs[CODE_ERREUR.LangueErronnée.nom] = e1;
		_erreurs[CODE_ERREUR.AucunIdParticipant.nom] = e2;
		_erreurs[CODE_ERREUR.AucunNumQuestion.nom] = e3;
		_erreurs[CODE_ERREUR.NumQuestionInvalide.nom] = e4;
		_erreurs[CODE_ERREUR.ModeDessinInvalide.nom] = e5;
		_erreurs[CODE_ERREUR.Inconnu.nom] = e6;
														  
		var _winbro;
		var _winw;		//window width
		var _winh;		//window height
		//var _sld;		//slider - timeline
		var _map;
		var _infowin;		//info window
		var _layerbike = null;		//layer bike om
		var _layertrans = null;		//layer transit on
		var _layertraff = null;		//layer traffic on
		var _loca;		//location
		var _addr;		//address
		var _bnds;		//bounds
		var _drawman;			//drawing manager
		var _mapmark;		// mapclickmarker
		var _mapdrawpg = -1;		//markers loaded to map from current page on showmap.
		var _mapdata = "";			//all map objects
		var _editon = false;
		var _delobjon = false;		//delete flag in edit mode
		var _favobjects = [];		//my objects
		var _objcount = 0;		//object counter
		var _findmarkers = [];		//search results markers
		var _selobj; 		//selected object / shapes vars
		var _geocoder;		//geocoder
		var _serv;		//service
		var _currpg = 1;
		var _currcat = "";
		var _cats = [];
		var _maxfavs = 1;
		var _mode;
		var _question;
		var _consigne;
		var _langue = LANGUE.Français;
		var _id_participant;
		var _searchradius = 15 //km
		var _decimal_prec = 10;
		var _qno;
		var _urlParams = {};
		var _qtip_text = "";
		var _qtip_title = "Questionnaire ISIS";
		var _httpReqSaveHome, _httpReqRespLookup, _httpReqHomeLookup, _httpReqSaveLoc, _httpReqSavePoly, _httpReqDeletePoly;
		var _lastGeocodedAddrComps = null;
		var _lastAddressText = null;
		var _lastPlaceIconClicked = null;
		var _drawnPolygon = null;
		var _geocodedSpecial = null;
		var _domicileInfoWindow = new google.maps.InfoWindow();
		var bilingue_tag = ' / ';
		var _pointPlaced = false;
		var _jumpedOffPage = false;
		var _existingRecInDB = false;
		var _deletePolyMarker;
		var _origPostCode = null, _returnedPostCode = null;
		var _postCodeRE = /[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1}\s*\d{1}[A-Z]{1}\d{1}/gi;
		var _zoomSnapTo = false;
		var _closeUpZoomLevel = 15;
		var _geocodeCounter = 0;
		var _CONFIG = null;
		var _addr_changed = false;
		var _confirm_once_geocoded = false;

		var _php_db_fname = "req_bd.php";
		var tripiniconpath = "media/mapmark.png";
		var file_config = 'config.json';
		var _municipalities = [];
		var _lookupPerformed = false;
        		
		$(document).ready( function() {
			$("#address").keyup( function(event)
			{
				if ( document.getElementById('searchmode').selectedIndex == 0) {
					_addr_changed = true;
				}
				if (event.keyCode == 13) {
					$("#search_btn").click();
				}
			});
			
			$("#morefinds").keyup( function(event)
			{
				if (event.keyCode == 13) {
					$("#morefinds").click();
				}
			});
		});
	</script>
	
</head>

<body onload="initialize();" onresize="resizebody();"  style="background-color:#999999">
	<!-- PAGE LAYOUT STARTS HERE -->
	<div id="maindiv">
		<div id="mapdiv"></div>
		<div id="infopanel">
			<div style="position:fixed; margin:2px">
				<img id="logo" src="media/logo_isis.jpg" style="position:absolute; top:0px; width:75px; height: 40px; background-color:#F2F2F4" />
			</div>
			<table id="dash" style="width:750px; margin-left:auto; margin-right:auto">
					<tr>
							<td style="width:100%">
							<p id="question" style="margin-top:7px; margin-bottom:1px; font-weight:bold; font-size:12.5px"></p>
                            <p id="consigne" style="font-size:12px; margin-top:5px; margin-bottom:5px;"></p>
							<div id="therest">
								<span id="searchspan" style="width:100%">
									<label id="searchonlbl">Rechercher par / Search on</label>
									<select id="searchmode" onchange="searchModeUpdated();">
										<option id="optaddr" value="addr">adresse / address</option>
										<option id="optnom" value="nom" selected>nom ou autres mots-clés / name or other keywords</option>
									</select>
									<img id="arrow" src="media/right-arrow.png" style="position: relative; top: 5px; width:20px; height: 20px;" />
									<input id="address" type="text" style="width:410px; height:18px; background-color:#F8F8F8"; autofocus="autofocus"/>&nbsp;
									<button id="search_btn" style="vertical-align:bottom; background-color:#F2F2F4; height: 22px; width:22px; background-size: 20px 20px; background-repeat: no-repeat; display: inline-block; background-image:url(media/mag-glass.png); " type="button" title="Lancer une recherche / Execute a search" onclick="rechercher()"></button>
									<button id="help_btn" style="vertical-align:bottom; background-color:#F2F2F4; height: 22px; width:22px; background-size: 19px 19px; background-repeat: no-repeat; display: inline-block; background-image:url(media/aide.png); " type="button" title="Voir des renseignements sur ce site / Help" onclick="showTour(true)"></button>
								</span>
								<div id="below" style="margin-top:13px">
									<form>
										<div id="bob" style="text-align:center; border: solid 0 Red; border-top-width:1px; padding-top:0.5ex"">
											<span id="directions" style="display:inline-block">
												<button id="backbtn" type="button" title="Passer à la question précédente / Go to the previous question" style="height: 32px; color:#FFFFFF; background-color:#C71F2D; font-size: 12px; float:left; margin: 2px; padding:2px; width:90px" onclick="goBack();">&lt;&lt; Précédent / &lt;&lt; Previous</button>
												<button id="forwbtn" type="button" title="Passer à la question suivante / Go to the next question" style="height: 32px; color:#FFFFFF; background-color:#C71F2D; font-size: 12px; float:right; margin: 2px; padding:2px; width: 90px" onclick="confirmeraddress();">Suivant &gt;&gt; / Next &gt;&gt;</button>
											</span>
										</div>
										<!--<img id="helpicon" style="margin-left:290px; border:noone; vertical-align:middle" src="media/Icon-information.svg" width="20" height="20"/>-->
									</form>
								</div>
							</div>
						</td>
					</tr>
			</table>
		</div>
		<div id="findspanel">
			<ol id="places"></ol>
			<div id="panheadfinds">
				<label>&nbsp;&nbsp;Résultats de la recherche... / &nbsp;&nbsp;Search results...</label>
				<img id="findsclose" title="Effacer les résultats de la recherche / Erase the search results" src="media/x-close.png" style="float:right; margin-right:2px; cursor:hand; cursor:pointer;" onclick="clearAllSearchResults();" />
			</div>
			<button id="morefinds" style="color:#FFFFFF; background-color:#C71F2D;" type="button">Plus de résultats... / More results...</button>
		</div>
	</div>

	<!-- PAGE LAYOUT ENDS HERE -->
	
	<script type="text/javascript">	
		var resizeTimer = 0;
		function resizebody()
		{
			if (resizeTimer){clearTimeout(resizeTimer);}
			resizeTimer = setTimeout(doresize, 500);
		}	
	
		function doresize()
		{
			onwindowsize();
		}
		
		function parseUrl()
		{
			var query = window.location.search.substring(1).split("&");
			for (var i = 0, max = query.length; i < max; i++)
			{
				if (query[i] === "") // check for trailing & with no param
					continue;

				var param = query[i].split("=");
				_urlParams[decodeURIComponent(param[0])] = decodeURIComponent(param[1] || "");
			}
		}
		
		function getUrlParam(key)
		{
			if ( typeof(_urlParams[key]) === 'undefined' )
				return null;
			return _urlParams[key];
		}
		
		function clearAddressField()
		{
			var addrField = document.getElementById("address");
			addrField.value = "";
			addrField.focus();
		}
		
		function validerUrlParams()
		{	
			var paramsValide = false;
			var errCode = lookForUrlErrors();
			
			if ( errCode == CODE_ERREUR.PasUneErreur ) {
				$("#question").html(_question);
                $("#consigne").html(_consigne);
				paramsValide = true;
			}
			else {
				$("#question").html("<em>ERREUR:</em> " + returnErrorMsg(errCode));
			}
			return paramsValide;
		}
		
		function returnErrorMsg( errCode )
		{
			var err = errCode;
			if ( !(err.nom in _erreurs) ) {
				err = CODE_ERREUR.Inconnu;
			}
			return _erreurs[err.nom][_langue.val];
		}
		
		function lookForUrlErrors()
		{
			var langue = getUrlParam('langue');
			if ( langue != null ) {
				if (langue == LANGUE.Français.val ) {
					_langue = LANGUE.Français;
				}
				else if (langue == LANGUE.Anglais.val ) {
					_langue = LANGUE.Anglais;
				}
				else {
					return CODE_ERREUR.LangueErronnée;
				}
			}
			else {
				toConsole("User has no language tag. Defaulting to French");
			}
			
			if ( getUrlParam('quest') == null ) {
				return CODE_ERREUR.AucunNumQuestion;
			}
			
			var quest_no = getUrlParam('quest').toLowerCase();
			for ( var i = 0; i < questionnaire_texte.length; i++ ) {
				var quest = questionnaire_texte[i];
				if (quest.question_no.toLowerCase() == quest_no) {
					if ( _langue == LANGUE.Anglais ) {
						_question = quest.question_an;
						_consigne = quest.consigne_an;
					}
					else {
						_question = quest.question_fr;
						_consigne = quest.consigne_fr;
					}
					var mode_dessin = quest.mode_dessin;
					if ( mode_dessin == MODE_DESSIN.Point.nom ) {
						_mode = MODE_DESSIN.Point;
					}
					else if ( mode_dessin == MODE_DESSIN.Polygone.nom ) {
						_mode = MODE_DESSIN.Polygone;
					}
					else if ( mode_dessin == MODE_DESSIN.DomicileVerification.nom ) {
						_mode = MODE_DESSIN.DomicileVerification;
					}
					else {
						return CODE_ERREUR.ModeDessinInvalide;
					}
					_qno = quest_no;
					break;
				}
			}
			if ( _question == null ) {
				return CODE_ERREUR.NumQuestionInvalide;
			}
			
			var particip_id = getUrlParam('pid');
			if ( particip_id == null || particip_id == "") {
				return CODE_ERREUR.AucunIdParticipant;
			}
				
			_id_participant = particip_id;	
			
			return CODE_ERREUR.PasUneErreur;
		}
		
		function setTitleForLang(index, doubleTitle) {
			var sub = bilingualSubstitution(doubleTitle);
			if (sub == null)
				return doubleTitle;
			return sub;
		}
			
		function setTextForLang() {
			var val = $(this).text();
			var sub = bilingualSubstitution(val);
			if (sub == null)
				return;
			
			$(this).text(sub);
		}
		
		function translateTagsForLang() {
			$(document).attr("title", setTitleForLang );
			$("button[title], input[title], label[title], img[title]").attr("title", setTitleForLang );
			$("button, input, label, option").each(setTextForLang);
			$("input[placeholder]").attr("placeholder", setTitleForLang );
		}
		
		function bilingualSubstitution(str)
		{
			if (str.indexOf(bilingue_tag)===-1) {
				return null;
			}
			var tokens = str.split(bilingue_tag);
			return tokens[_langue.ind];
		}


		function warnUserNoPoint()
		{
			submitFunc =
				function(e,resterSurPage,m,f) {
					if ( !resterSurPage ) {
						retournerdanslimesurvey(DIRECTION_QUESTIONNAIRE.Suivant);
					}
				}
				
			var popUpOptions = {
				'fr' : { title: "Voulez-vous passer à la question suivante ?",
						 buttons: { "Continuer sans localiser de lieu" : false,
								    "Localiser un lieu" : true },
                        focus: 1,
						submit: submitFunc },
				'en' : { title: "Do you want to go to the next question?",
						 buttons: { "Continue without locating a place" : false,
									"Locate a place" : true },
                         focus: 1,
						 submit: submitFunc	} };
			showDialog(bilingualSubstitution("Attention : Vous n'avez pas localisé de lieu. / Attention: You have not identified a location."),
					 popUpOptions[_langue.val]);
			$('div.jqi').css('width','530px'); // Makes the popup wider
		}
		
		function warnUserNoPoly()
		{
			submitFunc = 
				function(e,resterSurPage,m,f) {
					if ( !resterSurPage ) {
						if (_existingRecInDB) {
							sendDelPolyToDB();
						}
						else {
							retournerdanslimesurvey(DIRECTION_QUESTIONNAIRE.Suivant);
						}
					}
				};
				
			var popUpOptions = {
				'fr' : { title: "Voulez-vous passer à la question suivante ?",
						 buttons: { "Continuer sans dessiner de quartier" : false, 
									"Dessiner votre quartier" : true },
                         focus: 1,
						submit: submitFunc },
				'en' : { title: "Do you want to go to the next question?",
						 buttons: { "Continue without tracing your neighbourhood" : false, 
									"Trace your neighbourhood" : true },
                         focus: 1,
						submit: submitFunc } };
			
			showDialog(bilingualSubstitution("Attention : Vous n'avez pas dessiné votre quartier. / Attention: You have not traced your neighbourhood."), 
					 popUpOptions[_langue.val]);
			$('div.jqi').css('width','530px'); // Makes the popup wider
		}
		
		function goBack()
		{
			retournerdanslimesurvey(DIRECTION_QUESTIONNAIRE.Précédent);
		}
		
		function mysqlErrorResp( resp, func_name )
		{
			var error_prefix = "ERROR:";
			if ( resp.substring(0, error_prefix.length) == error_prefix ) {
				console.error( "DB update by " + func_name + " FAILED." );
			}
		}
		
		function setRadioButtonText()
		{
			var addressOptTooltip = "Option pour une recherche par adresse (complète ou partielle) / Option for a search by address (complete or partial)";
			var keyWordOptTooltip = "Option pour une recherche à proximité (dans un rayon de " + _searchradius + "km de l'épingle) par mots-clés / Option for a nearby search (within a " + _searchradius + "km radius of the map marker) by keywords";
			document.getElementById("radio_adresse").title = addressOptTooltip;
			document.getElementById("radio_adresse_label").title = addressOptTooltip;
 			document.getElementById("radio_nom").title = keyWordOptTooltip;
			document.getElementById("radio_nom_label").title = keyWordOptTooltip;

		}
		
		function confirmeraddress()
		{
			var ok = false;
			_mapmark.setVisible(false);
			clearAllSearchResults();
			if ( _mode == MODE_DESSIN.DomicileVerification ) {
				if ( !_pointPlaced ) {
					showDialog( bilingualSubstitution( "Vous devez localiser votre lieu de domicile sur la carte avant de continuer. / You must locate your home address on the map before continuing."));
				}
				else if ( _addr_changed ) {
					toConsole("Text in address box changed - regeocoding");
					_confirm_once_geocoded = true;
					geocodeAddress(getAddressText());
				}
				else {
					var inRMM = check_if_marker_in_rmm();
					saveHomeAddress(_mapmark, inRMM);
				}
			}
			else if ( _mode == MODE_DESSIN.Polygone ) {
				if ( _drawnPolygon == null ) {
					warnUserNoPoly();
				}
				else {
					savePolyToDB();
				}
			}
			else {
				if ( !_pointPlaced ) {
					warnUserNoPoint();
				}
				else if ( _addr_changed ) {
					toConsole("Text in address box changed - regeocoding");
					_confirm_once_geocoded = true;
					geocodeAddress(getAddressText());
				}
				else {
					if ( document.getElementById('searchmode').selectedIndex == 1 ) {
						document.getElementById('searchmode').selectedIndex = 0;
						updateAddressText(_lastGeocodedAddrComps.formatted_address);
					}
					saveLocationToDB();
				}
			}
		}

		function getNavigatorTypeAndVersion()
		{
			var ua= navigator.userAgent, N= navigator.appName, tem; 
			var M = ua.match(/(opera|chrome|safari|firefox|msie|trident)\/?\s*([\d\.]+)/i) || [];
			M = M[2]? [M[1], M[2]]:[N, navigator.appVersion, '-?'];
			if ( M && (tem = ua.match(/version\/([\.\d]+)/i))!= null)
				M[2]= tem[1];
			return { nav : M[0], ver : M[1] };
		};
		
		var widthConsigne = 330;
		
		function tourSubmitFunc(e,v,m,f)
		{
            if (v === -1){
				$.prompt.prevState();
				return false;
			}
			else if(v === 1){
				$.prompt.nextState();
				return false;
			}
		}
		
		function showTour(override_test_mode)
		{
			if (typeof(override_test_mode) === 'undefined')
				override_test_mode = false;
			if ( !_in_test_mode || override_test_mode )
                startTour();
        }
        
        function startTour()
        {
            tourStates = getTourStates()[_langue.val];
			var myPrompt = showDialog(tourStates);
			myPrompt.on('impromptu:loaded', function(e){
				$('button.jqidefaultbutton[id^="jqi_0"]').focus();
                if ( _mode == MODE_DESSIN.Polygone ) {
					$('.jqiclose').css('visibility', 'hidden');
				}
				else {
					$('.jqiclose').css('font-size','30px').css('top','0px').css('right', '15px').css('color', 'grey').attr('title', bilingualSubstitution('Arrêter le tutoriel / Stop the tutorial'));
				}
            });
		}
		
		function getTourStates()
		{
            var positions =
			[
            { container: '#help_btn', x: 5-widthConsigne/2, y: 37, width: widthConsigne, arrow: 'tc' },
            { container: '#mapdiv', x: 40, y: 65, width: widthConsigne, arrow: 'lt' }, // Zoomer
            { container: '#mapdiv', x: $('#mapdiv').width() /2 - (widthConsigne/2), y: 40, width: widthConsigne, arrow: 'bc' },            
            { container: '#mapdiv', x: $('#mapdiv').width() /2 - (widthConsigne/2), y: 5, width: widthConsigne, arrow: 'bc' },
			{ container: '#searchmode', x: 45, y: 30, width: widthConsigne, arrow: 'tl' },
			{ container: '#address', x: 45, y: 32, width: widthConsigne, arrow: 'tc' },
			{ container: '#forwbtn',  x: 45 - widthConsigne, y: 45, width: widthConsigne, arrow: 'tr' }
			];
			
            if ( _mode != MODE_DESSIN.Polygone )
			return { 'fr' : 
				[
				{
					title: '<b>Aide</b>',
					html: 'Dans ce questionnaire, nous vous demanderons parfois de localiser un lieu sur une carte. Voici quelques informations pour vous aider à le faire.<br><br>Vous pourrez accéder au tutoriel en tout temps en cliquant sur le bouton ci-dessus.',
					buttons: { Ignorer: 2, Commencer: 1 },
					focus: 1,
					position: positions[0],
					submit: tourSubmitFunc
				},
                { //1
					title: '<b>Zoomer</b>',
					html: 'Vous pouvez régler le niveau de zoom de la carte en déplaçant le curseur (ou en utilisant la roulette de votre souris si vous en avez une).',
					buttons: { Précédent: -1, Suivant: 1 },
					focus: 1,
					position: positions[1],
					submit: tourSubmitFunc
				},
				{ //2
					title: '<b>Déplacer la carte</b>',
					html: 'Vous pouvez déplacer la carte en maintenant appuyé le bouton gauche de la souris et en bougeant la main.',
					buttons: { Précédent: -1, Suivant: 1 },
					focus: 1,
					position: positions[2],
					submit: tourSubmitFunc
				},
				{ //3
					title: '<b>Situer un lieu sur la carte</b>',
					html: "Vous pouvez localiser un lieu en cliquant directement sur la carte. Un marqueur<img src='media/mapmark.png' style='width:20px; height:20px'>apparaîtra.",
					buttons: { Précédent: -1, Suivant: 1 },
					focus: 1,
					position: positions[3],
					submit: tourSubmitFunc
				},
				{ //4
					title: '<b>Rechercher un lieu</b>',
					html: "Vous pouvez aussi rechercher un lieu en indiquant son <b>adresse</b> ou en utilisant des <b>mots-clés</b>. Sélectionnez le mode du menu déroulant qui vous convient.",
					buttons: { Précédent: -1, Suivant: 1 },
					focus: 1,
					position: positions[4],
					submit: tourSubmitFunc
				},
				{ //5
					title: '<b>Rechercher un lieu</b>',
					html: "Saisissez les termes de votre recherche dans le champ de texte, puis appuyez sur 'Enter' ou cliquez sur la loupe pour afficher les résultat(s) qui apparaîtront sur la carte ou dans une liste.",
					buttons: { Précédent: -1, Suivant: 1 },
					focus: 1,
					position: positions[5],
					submit: tourSubmitFunc
				},
				{ //5
					title: '<b>Confirmer le lieu</b>',
					html: "Lorsque vous êtes satisfait(e) de la localisation du marqueur<img src='media/mapmark.png' style='width:20px; height:20px'>, cliquez sur <b>« Suivant »</b>.",
					buttons: { Fin : 2 },
					focus: 0,
					position: positions[6],
					submit: tourSubmitFunc
				}
				],
			'en' :
				[
				{ //0
					title: "<b>Help</b>",
					html: "In this questionnaire, we will sometimes ask you to locate a place on a map. The following instructions will guide you in using the maps.<br><br>You can access the tutorial at any time by clicking the button above.",
					buttons: { Ignore : 2, Start: 1 },
					focus: 1,
					position: positions[0],
					submit: tourSubmitFunc
				},
				{ //1
					title: '<b>Zooming</b>',
					html: "Adjust the map’s zoom level by moving the slider up or down (or by moving the scroll wheel on your mouse if you have one).",
					buttons: { Previous: -1, Next: 1 },
					focus: 1,
					position: positions[1],
					submit: tourSubmitFunc
				},
				{ //2
					title: '<b>Moving the map</b>',
					html: 'You can shift the map by moving the mouse while holding its left-click button.',
					buttons: { Previous: -1, Next: 1 },
					focus: 1,
					position: positions[2],
					submit: tourSubmitFunc
				},
				{ //3
					title: '<b>Locating a place on the map</b>',
					html: "You can locate a place by clicking directly on the map. A marker like this<img src='media/mapmark.png' style='width:20px; height:20px'>will appear.",
					buttons: { Previous: -1, Next: 1 },
					focus: 1,
					position: positions[3],
					submit: tourSubmitFunc
				},
				{ //4
					title: '<b>Searching for a place</b>',
					html: "You can also search for a place based on its <b>address</b> or on <b>keywords</b>. Select the appropriate search mode from the dropdown menu.",
					buttons: { Previous: -1, Next: 1 },
					focus: 1,
					position: positions[4],
					submit: tourSubmitFunc
				},
				{ //5
					title: '<b>Searching for a place</b>',
					html: "Type your search in the text field, then press 'Enter' or click on the magnifying glass button to show the results on the map or in a list.<br><br>If a list of results appears, please select the correct place and a marker<img src='media/mapmark.png' style='width:20px; height:20px'>will appear.",
					buttons: { Previous: -1, Next: 1 },
					focus: 1,
					position: positions[5],
					submit: tourSubmitFunc
				},
				{ //6
					title: '<b>Confirming the location</b>',
					html: "Once the marker<img src='media/mapmark.png' style='vertical-align:text-bottom; width:20px; height:20px'>on the map corresponds to the desired location, click <b>“Next”</b>.",
					buttons: { Done: 2 },
					focus: 0,
					position: positions[6],
					submit: tourSubmitFunc
				}
				]
			};
            
            var positionsPoly =
			[
            { container: '#mapdiv', x: 100, y: 20, width: 470, arrow: 'rb' }
			];
			
            return { 'fr' : 
				[
				{
					title: 'Sur cette carte, nous vous demandons de tracer la zone correspondant à votre quartier',
					html: "Cliquez sur la carte avec la souris pour marquer les points qui délimitent votre quartier. Pour fermer la zone, cliquez à nouveau sur le premier point.<p/><div style='width:180px; height:120px; margin-left:auto; margin-right:auto;'><img style='height: 100%; width:100%;' src='media/DessinQuartier_Video.gif'></div>Pour effacer la zone, cliquez dessus avec la <img src='media/x-close2.png' style='position:relative; top:1px; width:12px; height:12px'> ... et recommencez!",
					buttons: { OK: 2 },
					focus: 0,
					position: positionsPoly[0],
					submit: tourSubmitFunc
				}
                ],
			'en' :
				[
				{
					title: 'On this map we will ask you to draw the area that corresponds to your neighbourhood',
					html: "Click on the map with the mouse to draw the boundary points outlining the area. To close the area, re-click on the first boundary point.<p/><div style='width:180px; height:120px; margin-left:auto; margin-right:auto;'><img style='height: 100%; width:100%;' src='media/DessinQuartier_Video.gif'></div>To redo the area, erase it by clicking the <img src='media/x-close2.png' style='position:relative; top:5px; width:20px; height:20px'> on the area… and then restart!",
					buttons: { OK: 2 },
					focus: 0,
					position: positionsPoly[0],
					submit: tourSubmitFunc
				}
				]
			};
		}
		
		function extractPostalCode(str)
		{
			if ( typeof(str) != 'undefined' && str.length > 0 ) {
				var res = str.match(_postCodeRE);
				if (res != null && res.length > 0)
					return res[0].toUpperCase();
			}
			return null;
		}
		
		function disableRadioButton(id)
		{
			document.getElementById(id).disabled = "disabled";
			document.getElementById(id + '_label').style.color = "LightGrey";
		}
		
		function initialize()
		{
			parseUrl();
			if ( !validerUrlParams() ) {
				document.getElementById('therest').style.visibility = "hidden";
				return;
			}
			
			$.ajax({
				type: 'GET',
				async: false,
				url:  'config.json',
                dataType: "json",
				success: function(data) {
					_CONFIG = data; // ???
			}});
			
			if ( _CONFIG == null ) {
				showDialog("ERREUR SURVENUE :(");
				console.error("Config file '" + file_config + "' not found or badly formatted. Aborting");
				return;
			}
			_in_test_mode = parseInt(get_config('mode_test', '0' ));
			
			try { onwindowsize(); } catch (er) { }	
			mapinit();
			var smode = document.getElementById('searchmode');
			
			if ( _mode == MODE_DESSIN.Polygone )
			{
				//disableRadioButton('radio_adresse');
				$('#searchonlbl').css('color', 'lightgrey');
				$('#arrow').attr('src', 'media/right-arrow-disabled.png');	
				smode.remove(smode.selectedIndex);
				smode.remove(smode.selectedIndex);
				smode.disabled = "disabled";
				var searchbtn = $('#search_btn');
				searchbtn.attr('disabled', true);
				searchbtn.css('background-image',"url('media/mag-glass-disabled.png')");
				document.getElementById('address').disabled = "disabled";
				document.getElementById('address').placeholder = "";
				setDrawTools();
				_map.setZoom(_closeUpZoomLevel);
			}
			else {
				smode.selectedIndex = 1;
			}
			
			searchModeUpdated();
			translateTagsForLang();
			clearAddressField();
			
			if ( _mode == MODE_DESSIN.DomicileVerification ) {
				smode.selectedIndex = 0;
				document.getElementById('searchmode').disabled = "disabled";
				var home_addr_encoded = getUrlParam('addr');
				if (home_addr_encoded != null) {
					var home_addr = decodeURI(home_addr_encoded);
					geocodeAddress(home_addr);
				}
				else {
					puthomepin();
				}
				getMunicipalities();
			}
			else
			{
				puthomepin();
				init_map_pin_if_question_already_answered(_qno);
				initiateTour();
			}
		}
		
		function get_config(attr, defaut)
		{
			var config_val = _CONFIG[attr];
			if (typeof(config_val) === 'undefined') {
				if (typeof(defaut) === 'undefined') {
					config_val = null;
				}
				else {
					toConsole("Config entry '" + attr + "' not found; defaulting to " + defaut);
					config_val = defaut;
				}
			}
			return config_val;
		}
		
		function getMunicipalities()
		{
			var csvData;
			var csvDetails = get_config('csv_municipalites', null);
			if ( csvDetails != null ) {
				$.ajax({
					type: 'GET',
					async: false,
					url:  csvDetails.nom,
					success: function(data) {csvData = data;}
				});
				var arr = $.csv.toObjects(csvData);
				for (var i=0; i < arr.length; i++) {
					_municipalities.push(arr[i][csvDetails.col_munic]);
				}
				toConsole(_municipalities.length + " municipalités lues du fichier '" + csvDetails.nom + "'");
			}
			else {
				console.error("Municipalities CSV file config not found!!");
			}
		}
		
		function initiateTour()
		{
			if ( _mode == MODE_DESSIN.DomicileVerification ||
				 _mode == MODE_DESSIN.Polygone ) {
				showTour();
			}
		}
		
		function searchModeUpdated()
		{
			if ( _mode == MODE_DESSIN.Polygone )
				return;

			var mod = document.getElementById('searchmode');
			var addrField = document.getElementById('address');
			if ( mod.value == 'addr' ) {
				addrField.placeholder = bilingualSubstitution('-- Saisir une adresse -- / -- Enter an address --');
			}
			else  {
				addrField.placeholder = bilingualSubstitution("-- Saisir le nom du lieu ou des mots-clés associés -- / -- Enter the name of the place or other related keywords --");
			}
			$('#address').select();
		}
		
		function isFirstInteraction()
		{
			return 	_geocodeCounter == 1 &&
					_mode == MODE_DESSIN.DomicileVerification &&
					!_lookupPerformed;
		}
		
		function showDialog(msg, options)
		{
			if ( typeof(options) === 'undefined' ) 
				var prompt = $.prompt(msg);
			else
				var prompt = $.prompt(msg, options);
			prompt.on('impromptu:loaded', function(e){
				$('div.jqi button').css('padding', '8px 15px');
			});
			return prompt;
		}
		
		function toConsole()
		{
			if ( typeof(window.console ) === 'undefined') {
				return;
			}
			var str = "";
			for (var i=0; i < arguments.length;i++) {
				str += arguments[i].toString();
			}
			window.console.info(str);
		}
	</script>	
</body>
</html>
